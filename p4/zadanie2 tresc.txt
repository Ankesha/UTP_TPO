Zadanie badawcze
Przekazywanie wyj¹tków kontrolowanych z lambda-wyra¿eñ do obs³ugi w bloku otaczaj¹cym lambda.

W kontekœcie:

  public static void main(String[] args) throws IOException {
    /*<--
     *  definicja operacji w postaci lambda-wyra¿eñ :
     *  - flines - zwraca listê wierszy z pliku tekstowego
     *  - join - ³¹czy napisy z listy (zwraca napis po³¹czonych ze sob¹ elementów listy napisów)
     *  - collectInts - zwraca listê liczb ca³kowitych zawartych w napisie
     *  - sum - zwraca sumê elmentów listy liczb ca³kowitych
     */

    String fname = System.getProperty("user.home") + "/LamComFile.txt";
    InputConverter<String> fileConv = new InputConverter<>(fname);
    List<String> lines = fileConv.convertBy(flines);
   // ....
}

Uwaga: w programie nie wolno definiowaæ ¿adnych w³asnych interfejsów (za wyj¹tkiem byæ mo¿e rozszerzeñ interfejsów z pakietu java.util.function), a wiêc operacje flines, join, itp. musz¹ opieraæ siê na gotowych interfejsach funkcyjnych z pakietu java.util.function lub ich rozszerzeniach.

Operacja flines zawiera odczyt pliku, zatem mo¿e powstaæ wyj¹tek IOException.
Wymagane jest, aby tê operacjê zdefiniowac jako lambda-wyra¿enie.
Ale z lambda wyra¿eñ, opieraj¹cych siê na interfejsach funkcyjnych z pakietu java.util.function, nie mo¿emy przekazaæ obs³ugi wyjatków do otaczaj¹cego bloku.
I wobec tego musimy pisaæ w definicji flines try { } catch { }
Jak spowodowaæ, aby nie by³o to konieczne i w przypadku powstania wyj¹tku IOException
zadzia³a³a klauzula throws metody main ?